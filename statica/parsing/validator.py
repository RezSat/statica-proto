"""AST Validator for Statica DSL.

This module provides semantic validation for the Abstract Syntax Tree (AST)
generated by the parser. It checks for logical errors such as undefined variables,
invalid command parameters, and type mismatches before execution.

The validator uses the execution context to verify references to datasets or variables.
"""

from typing import List, Dict, Any
from lark import Visitor
from ..core.context import Context
from ..core.exceptions import ValidationError


class ASTValidator(Visitor):
    """Validator for Statica AST.

    Performs semantic checks on the parsed AST to ensure validity.
    Requires a Context instance to check existing variables and datasets.
    """

    def __init__(self, context: Context) -> None:
        """Initialize the validator with execution context.

        Args:
            context: The runtime context for checking variable existence.
        """
        self.context = context

    def validate(self, ast: List[Dict[str, Any]]) -> None:
        """Validate the entire AST.

        Iterates through each command in the AST and performs semantic checks.
        Raises ValidationError on issues.

        Args:
            ast: List of command dictionaries from the parser.

        Raises:
            ValidationError: If semantic issues are found.
        """
        for stmt in ast:
            cmd = stmt.children[0].get('cmd')
            method_name = f'_validate_{cmd}'
            if cmd:
                method = getattr(self, method_name)
                method(stmt)

    def _validate_assign(self, stmt: Dict[str, Any]) -> None:
        var_name = stmt.children[0].get('name')
        

    def _validate_load(self, stmt: Dict[str, Any]) -> None:
        pass

    def _validate_describe(self, stmt: Dict[str, Any]) -> None:
        pass

    def _validate_test(self, stmt: Dict[str, Any]) -> None:
        pass

    def _validate_regress(self, stmt: Dict[str, Any]) -> None:
        pass

    def _validate_plot(self, stmt: Dict[str, Any]) -> None:
        pass

    def _validate_conclude(self, stmt: Dict[str, Any]) -> None:
        pass

    def _validate_ask_table(self, stmt: Dict[str, Any]) -> None:
        pass

